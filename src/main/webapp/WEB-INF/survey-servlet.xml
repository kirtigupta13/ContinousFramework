<?xml version="1.0" encoding="UTF-8"?>

<!-- This XML-file is known as front controller of spring MVC framework -->

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd  
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- This automatically detects all java classes having @Controller annotation 
		written in them within the below package -->
	<context:annotation-config />
	<context:component-scan base-package="com.cerner.devcenter.education.controllers" />
	<context:component-scan base-package="com.cerner.devcenter.education" />

	<mvc:annotation-driven />
	<mvc:resources mapping="/resources/**" location="resources/" />

	<!-- This class Tells the front controller which handler mapping is to be 
		used. This scans the request and tells which data generator class is to be 
		called for further processing -->
	<beans:bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="cacheSeconds" value="0" />
		<beans:property name="messageConverters">
			<beans:list>
				<beans:bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"
		p:defaultContentType="application/json" />

	<beans:bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<beans:property name="viewResolvers">
			<beans:list>
				<beans:bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver"
					p:prefix="/" p:suffix=".jsp">
				</beans:bean>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- This section establishes the location of database.properties referenced 
		in the bean with id "dataSource" -->
	<beans:bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location" value="/WEB-INF/database.properties" />
	</beans:bean>

	<!-- Values in this section are specified in /WEB-INF/database.properties -->
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="${jdbc.driverClassName}" />
		<beans:property name="url" value="${jdbc.url}" />
		<beans:property name="username" value="${jdbc.username}" />
		<beans:property name="password" value="${jdbc.password}" />
	</beans:bean>

	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		autowire="constructor">
		<beans:constructor-arg value="dataSource" />
	</beans:bean>

	<beans:bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"
		autowire="constructor">
		<beans:constructor-arg value="dataSource" />
	</beans:bean>

	<beans:bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtprr.cerner.com" />
		<beans:property name="port" value="25" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	<!-- this is a template message that we can pre-load with default state -->
	<beans:bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
		<beans:property name="from" value="no-reply@cerner.com" />
	</beans:bean>

	<beans:bean id="skillEvaluator"
		class="com.cerner.devcenter.education.models.CategorySkillEvaluator" />
		
	<beans:bean id="resourceExtractor"
		class="com.cerner.devcenter.education.models.SkillResourceExtractor">
	</beans:bean>

	<beans:bean id="ldapReader"
		class="com.cerner.devcenter.education.authentication.LdapReader" />

</beans:beans>